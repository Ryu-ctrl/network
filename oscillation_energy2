import numpy as np
import numpy.linalg as LA 
from numpy import zeros
import math
import matplotlib.pyplot as plt
import networkx as nx
import random
from matplotlib.image import imread
import matplotlib.colors
from mpl_toolkits.mplot3d import Axes3D
#print設定
np.set_printoptions(precision=3, suppress=True,linewidth=300)

#乱数シード 22○ 23△ 31△ 38○ 39○  45◎
np.random.seed(45)

#ノード数
n=30

#時間の長さ
TIME = 100

#クラスター構造のあるネットワークの生成
np.random.seed(1)
BA = nx.barabasi_albert_graph(n, m,seed=2)
nx.draw(BA)

#隣接行列取得
a = nx.to_numpy_matrix(BA)
A = np.array(a)
#print(A)

#隣接行列から次数行列生成
d = np.zeros_like(A)

dd = np.sum(A, axis=1)

dsum=0
for i in range(0 , n , 1):
    d[i , i] = dd[i]
    dsum+=dd[i]
#print(d)
D = np.array(d)
#print(D)

#ラプラシアン行列
L = D - A              
print(L)

#wが固有値,Vが固有ベクトル
w, V = LA.eig(L)
print(w)


#固有ベクトルを正規直交化V→v
v,r = np.linalg.qr(V)
#print(v)

#固有値ごとの固有ベクトル
vv =[0 for i in range(n)]
for i in range(0 , n , 1):
    vv[i]=v[ : , i] 
    #print(vv[i])

####################################################
####################################################
####################################################
#r0=減衰係数1,r1=減衰係数2,rw=固有値依存の減衰係数,Rw=閾値 0.75,1.3
#1.86_0.535
#2.421_0.413
#1.87_0.54
r0 =1.0
r1 = 0.9
rw =[0 for i in range(n)]
for i in range(0 , n , 1):
    if w[i] == 0:
        rw[i] = 0
    else:
        rw[i] = r0 + r1 * w[i]
Rw =[0 for i in range(n)]
for i in range(0 , n , 1):
    Rw[i] = (rw[i]/2)**2
    
#初期条件
x0 =[0 for i in range(TIME*50)]
x0[0] = zeros(30)
#st = random.randint(0,25)
#x0[0][0] = 1

v0 =[0 for i in range(TIME*50)]
v0[0] = zeros(30)

#変位の時間変化を求める関数
def xt(t):
    #amu0の計算
    amu0 = [0 for i in range(n)]
    for i in range(0 , n , 1):
        amu0[i] = np.dot(x0[j-1],vv[i])
    
    #Amu0の計算
    Amu0 = [0 for i in range(n)]
    for i in range(0 , n , 1):
        Amu0[i] = np.dot(v0[j-1],vv[i])
    
    a_t = [0 for i in range(n)]
    sumx = 0
    for i in range(0,n,1):
        if w[i] > Rw[i]:
            a_t[i] = math.exp(-(rw[i]/2)*t)*(amu0[i]*math.cos(math.sqrt(w[i]-Rw[i])*t)+((rw[i]*amu0[i]+2*Amu0[i])/(2*math.sqrt(w[i]-Rw[i])))*math.sin(math.sqrt(w[i]-Rw[i])*t)) * vv[i]
            sumx += a_t[i]
        elif w[i] < Rw[i]:
            a_t[i] = ((((-(rw[i]/2) + math.sqrt(Rw[i]-w[i]))*amu0[i]-Amu0[i])/(2*math.sqrt(Rw[i]-w[i]))) * (np.exp(-(rw[i]/2)*t - math.sqrt(Rw[i]-w[i])*t)) +
                           (((-(rw[i]/2) - math.sqrt(Rw[i]-w[i]))*amu0[i]-Amu0[i])/(-2*math.sqrt(Rw[i]-w[i]))) * (np.exp(-(rw[i]/2)*t + math.sqrt(Rw[i]-w[i])*t))) *vv[i]
            sumx += a_t[i]
    return sumx

#速度の時間変化を求める関数
def vt(t):
    #amu0の計算
    amu0 = [0 for i in range(n)]
    for i in range(0 , n , 1):
        amu0[i] = np.dot(x0[j-1],vv[i])
        
    #Amu0の計算
    Amu0 = [0 for i in range(n)]
    for i in range(0 , n , 1):
        Amu0[i] = np.dot(v0[j-1],vv[i])        
        
    A_t = [0 for i in range(n)]
    sumv = 0
    for i in range(0,n,1):
        if w[i] > Rw[i]:
            A_t[i] =  np.exp(-(rw[i]/2)*t) * (-(rw[i]/2)*amu0[i]*math.cos(math.sqrt(w[i]-Rw[i])*t) - (rw[i]/2)*((rw[i]*amu0[i]+2*Amu0[i])/(2*math.sqrt(w[i]-Rw[i])))*math.sin(math.sqrt(w[i]-Rw[i])*t)\
                            + math.cos(math.sqrt(w[i]-Rw[i])*t)*((rw[i]*amu0[i]+2*Amu0[i])/2) - amu0[i]*math.sqrt(w[i]-Rw[i])*math.sin(math.sqrt(w[i]-Rw[i])*t)) * vv[i]
            sumv += A_t[i]
        elif w[i] < Rw[i]:
            A_t[i] = ((-(rw[i]/2) - math.sqrt(Rw[i]-w[i]))*(((-(rw[i]/2) + math.sqrt(Rw[i]-w[i]))*amu0[i]-Amu0[i])/(2*math.sqrt(Rw[i]-w[i]))) * (np.exp(-(rw[i]/2)*t - math.sqrt(Rw[i]-w[i])*t)) +
                            (-(rw[i]/2) + math.sqrt(Rw[i]-w[i]))*(((-(rw[i]/2) - math.sqrt(Rw[i]-w[i]))*amu0[i]-Amu0[i])/(-2*math.sqrt(Rw[i]-w[i]))) * (np.exp(-(rw[i]/2)*t + math.sqrt(Rw[i]-w[i])*t))) *vv[i]
            sumv += A_t[i]
    return sumv   

Acount = [0 for i in range(n)]
for i in range(0,n,1):
    Acount[i] = 0   

Bcount = [0 for i in range(n)]
for i in range(0,n,1):
    Acount[i] = 0       

for j in range(1 , TIME*50 , 1):
    x0[j] = zeros(30)
    #st = np.random.randint(0,30)
    #print(st)
    #st = j%25
    #print(st)
    #st =16
    #st = random.randint(0,12)
    st = np.random.choice([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,],p=[dd[0]/dsum,dd[1]/dsum,dd[2]/dsum,dd[3]/dsum,dd[4]/dsum,dd[5]/dsum,dd[6]/dsum,dd[7]/dsum,dd[8]/dsum,dd[9]/dsum,dd[10]/dsum,dd[11]/dsum,dd[12]/dsum,dd[13]/dsum,dd[14]/dsum,dd[15]/dsum,dd[16]/dsum,dd[17]/dsum,dd[18]/dsum,dd[19]/dsum,dd[20]/dsum,dd[21]/dsum,dd[22]/dsum,dd[23]/dsum,dd[24]/dsum,dd[25]/dsum,dd[26]/dsum,dd[27]/dsum,dd[28]/dsum,dd[29]/dsum])

    x0[j][st] = 1
    xt(1/50)
    x0[j] += xt(1/50)
    #print(j/50,st,x0[j]) ⇦
    #x0[i][st] = random.gauss(1,0.2)
    #x0[i][st] = 1
    #x0[i][0] = 1
    #print(x0[i])    

    v0[j] = zeros(30)
    #vt(1/50)
    #v0[j] += vt(1/50)     
    #print(j/50,st,v0[j])
    
"""
    if 14.22*50+1 <= j <= 17.22*50:
        c = 0
        while c < n:
            if st == c:
                Acount[c] += 1 
                break
            else:
                c += 1
    if 17.22*50+1 <= j <= 20.22*50:
        c = 0
        while c < n:
            if st == c:
                Bcount[c] += 1 
                break
            else:
                c += 1              
plt.figure()
plt.title('A')
plt.xlabel('node ID')
plt.ylabel('number of times')
height= np.array([Acount[0],Acount[1],Acount[2],Acount[3],Acount[4],Acount[5],Acount[6],Acount[7],Acount[8],Acount[9],Acount[10],Acount[11],Acount[12],Acount[13],Acount[14],Acount[15],Acount[16],Acount[17],Acount[18],Acount[19],Acount[20],Acount[21],Acount[22],Acount[23],Acount[24]])
left = np.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])
plt.bar(left, height)

plt.figure()
plt.title('B')
plt.xlabel('node ID')
plt.ylabel('number of times')
height= np.array([Bcount[0],Bcount[1],Bcount[2],Bcount[3],Bcount[4],Bcount[5],Bcount[6],Bcount[7],Bcount[8],Bcount[9],Bcount[10],Bcount[11],Bcount[12],Bcount[13],Bcount[14],Bcount[15],Bcount[16],Bcount[17],Bcount[18],Bcount[19],Bcount[20],Bcount[21],Bcount[22],Bcount[23],Bcount[24]])
left = np.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])
plt.bar(left, height)
"""
#ノードiの振動エネルギーを求める関数
def Et(tt):
    #amu0の計算
    amu0 = [0 for i in range(n)]
    for i in range(0,n,1):
        amu0[i] = np.dot(x0[int(t*50)],vv[i])
    
    #Amu0の計算
    Amu0 = [0 for i in range(n)]
    for i in range(0,n,1):
        Amu0[i] = np.dot(v0[int(t*50)],vv[i])        

    #振動モードごとの振動エネルギー
    s = 0
    E = [0 for i in range(n)]
    for i in range(0 , n , 1):
        if w[i] > Rw[i]:
            E[i] = math.exp(-rw[i]*tt) * ((amu0[i]**2/2)*w[i] + (rw[i]*amu0[i]*Amu0[i]/4) + (Amu0[i]**2/2))
            s += 1
            
        elif w[i] <= Rw[i]:
            E[i] = 0
    #print(i,"番目が減衰振動,固有値は",w[i])
    #print("減衰振動の数は",s,"/",n)
    #print("過減衰の数は",n-s,"/",n)

    #振動モードが各ノードに与えるエネルギー
    Ei = [0 for i in range(n)]
    for j in range(0, n ,1):
        for i in range(0, n ,1):
            a = E[i] * v[j , i] * v[j , i]
            Ei[j] = Ei[j] + a
            
    z = zeros(30, dtype=float)
    for i in range(0,n,1):
        z[i] = Ei[i]
    return z

#ネットワーク全体の振動エネルギーを求める関数
def E(tt):
    ESUM =0
    #amu0の計算
    amu0 = [0 for i in range(n)]
    for i in range(0,n,1):
        amu0[i] = np.dot(x0[int(t*50)],vv[i])
        
    #振動モードごとの振動エネルギー
    s = 0
    E = [0 for i in range(n)]
    for i in range(0 , n , 1):
        if w[i] > Rw[i]:
            E[i] = math.exp(-rw[i]*tt) * (w[i]-Rw[i]) * amu0[i] * amu0[i] * ((1/2)+((rw[i]*rw[i])/(8*(w[i]-Rw[i]))))
            ESUM += E[i]
            print(i,"番目が減衰振動,固有値は",w[i])
        elif w[i] < Rw[i]:
            E[i] = 0
    return ESUM
    #print("減衰振動の数は",s,"/",n)
    #print("過減衰の数は",n-s,"/",n)

SSUM=0
bb = list(range(0))
for k in range(0,1,1):
    SUM = 0
    for t in np.arange(0, TIME , 0.02):
        Et(0)
        bb.append(E(0))
        Et(0.01)
        bb.append(E(0.01))
        SUM += Et(0)
        SUM += Et(0.01)
        #if  t.is_integer() == True:
        #print('t=',t,'，',E(0)) 　⇦
    ave = SUM/(TIME*10)
    #print(ave)
    #plot(ave)
    SSUM += ave
    
#for t in np.arange(0, 0.5 , 0.02):
#    print(Et(0))
#    cc=Et(0)
#    x = np.random.random(23) # 各ノードの信号値
#    for i in range(23):
#        x[i]=cc[i]
#
#    pos = nx.spring_layout(G)
#    cmap = plt.cm.plasma
#
#    fig = plt.figure(figsize=(10,5),dpi=200)
#    nodes = nx.draw_networkx_nodes(G, linewidths=1, node_color=x, pos=pos, cmap=cmap, node_size=200,vmin=0,vmax=np.max(x)
#    links = nx.draw_networkx_edges(G, pos=pos, width=0.5)
#    nx.draw_networkx_labels(G,pos=pos)
#    nodes.set_edgecolor('k')
#    plt.box(False)
#    sm = plt.cm.ScalarMappable(cmap=cmap, norm=plt.Normalize(vmin=np.min(x), vmax=np.max(x)))
#    sm.set_array([])
#    cbar = plt.colorbar(sm,label='oscillation energy')
#    plt.rcParams['axes.labelsize'] = 40
#    plt.show()



SSUM += ave
plt.figure()
aa = np.arange(0, TIME, 0.01) #-5から5まで0.1区切りで配列を作る
plt.plot(aa,bb) # この場合のplot関数の第一引数xは、x軸に対応し、第二引数のyがy軸にあたります。
plt.xlabel("t",fontsize=18)
plt.ylabel("oscillation energy",fontsize=18)
plt.show()
AVE=SSUM/1
print(AVE)

x = np.random.random(30) # 各ノードの信号値
for i in range(30):
    x[i]=AVE[i]

pos = nx.spring_layout(BA)
cmap = plt.cm.cool

fig = plt.figure(figsize=(10,3.1),dpi=200)
#pos = {"1":(-3.5,-0.8),"2":(-4.0,-0.4),"3":(-3,-0.4),"4":(-3.5,0),"5":(-4,0.4)\
#           ,"6":(-3.5,0.8),"7":(-3,0.4),"8":(-2,0.4),"9":(-1,0.4),"10":(-2,-0.4)\
#           ,"11":(-1,-0.4),"12":(0,-0.4),"13":(0.5,-0.8),"14":(0.5,0),"15":(1.5,-0.8)\
#           ,"16":(1.5,0),"17":(2,-0.4),"18":(3,-0.4),"19":(3.5,-0.8),"20":(4,-0.4)\
#           ,"21":(3,0.4),"22":(4,0.4),"23":(3.5,0.8)
#    }
nodes = nx.draw_networkx_nodes(G, linewidths=1, node_color=x, pos=pos, cmap=cmap, node_size=800)
links = nx.draw_networkx_edges(G, pos=pos, width=2)
nx.draw_networkx_labels(G,pos=pos,font_size=18)
nodes.set_edgecolor('k')
plt.box(False)
sm = plt.cm.ScalarMappable(cmap=cmap, norm=plt.Normalize(vmin=np.min(x), vmax=np.max(x)))
sm.set_array([])
cbar = plt.colorbar(sm,label='oscillation energy')
plt.rcParams['axes.labelsize'] = 20
plt.show()
